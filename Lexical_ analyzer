#include <string>
#include <iostream>
#include <map>
#include "lex.h"
#include <sstream>
using namespace std;

// Keywords mapping
static map<string, Token> kwmap = {
    {"PROGRAM", PROGRAM}, {"WRITELN", WRITELN}, {"INTEGER", INTEGER}, {"REAL", REAL},
    {"STRING", STRING}, {"VAR", VAR}, {"BEGIN", BEGIN}, {"IF", IF}, {"END", END},
    {"ELSE", ELSE}, {"FOR", FOR}, {"THEN", THEN}, {"DO", DO}, {"TO", TO}, {"DOWNTO", DOWNTO}
};

// Token mapping for printing/debugging
static map<string, Token> tokenPrint = {
    {"ICONST", ICONST}, {"RCONST", RCONST}, {"SCONST", SCONST}, {",", COMMA}, {"<", LTHAN},
    {"+", PLUS}, {"-", MINUS}, {"*", MULT}, {"/", DIV}, {":=", ASSOP}, {"(", LPAREN},
    {")", RPAREN}, {":", COLON}, {",", COMMA}, {"=", EQUAL}, {">", GTHAN}, {";", SEMICOL}, {"<", LTHAN}, {"50", ICONST}
};

// Function to handle identifiers or keywords
LexItem id_or_kw(const string& lexeme, int linenum)
{
    Token tt = IDENT;

    // Check if it's a keyword
    auto kIt = kwmap.find(lexeme);
    if (kIt != kwmap.end())
    {
        tt = kIt->second;
    }

    // Check if it's a printable token
    auto ttp = tokenPrint.find(lexeme);
    if (ttp != tokenPrint.end()) {
        tt = ttp->second;
    }

    return LexItem(tt, lexeme, linenum);
}

// Function to get the next token from the input stream
LexItem getNextToken(istream& in, int& linenum)
{
    enum TokState { START, INID, INSTRING, ININT, INFLOAT, INCOMMENT } lexstate = START;
    string lexeme;
    char ch, nextch, nextchar;
    bool isreal = false;
    bool iscomment = false;
    bool isscomm = false;
    string status;

    while (in.get(ch)) {
        switch (lexstate) {
            // ... (rest of the code remains unchanged)
        }
    }

    // Handle end of file and return appropriate token
    if (status == "Incomment") {
        return LexItem(ERR, "Incomment", linenum);
    }
    if (in.eof()) {
        return LexItem(DONE, "", linenum);
    }
    return LexItem(ERR, "some strange I/O error", linenum);
}
